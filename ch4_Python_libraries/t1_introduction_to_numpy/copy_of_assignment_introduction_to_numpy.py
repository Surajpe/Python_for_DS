# -*- coding: utf-8 -*-
"""Copy of Assignment - Introduction to NumPy.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DCmBoWtGUqlleW8BsP8OW8AsOK5P0gjG

# <u> Use only those concepts which have been taught till now </u>
"""

import numpy as np

"""# <u>**Problem 1**</u>

### Construct a 2-D $10*10$ matrix with the following constraints:

*  ####  The element at $[0,0]$ should be 1
*  ####   The element at $[0,9]$ should be 100
* ####   The element at $[9,0]$ should be 50
* ####   The interval between elements in rows should be constant
* ####   The interval between elements in columns should be constant


"""

# Your code here
# array_zeros=np.zeros((10,10))
# print(array_zeros)
# for i in range(10):
#   for j in range(10):
#     if(i==0):
#       array_zeros[i][j]=(j+1)*10
#     if(i==0 and j==0):
#       array_zeros[i][j]=0
#     elif(j==0):
#       array_zeros[i][j]=(i+1)*5

# array_zeros[0][0]=1
# print(array_zeros)

rows=np.linspace(1,50,10)
list=[]
for steps in rows:
  list.append(np.linspace(steps,steps*100,10,endpoint=True,dtype=int))
arr=np.array(list)
print(arr)

"""#<u>**Problem 2**</u>

### Construct a 2-D $10*10$ matrix with the diagonal elements equal to zero and all the other elements equal to 1
"""

# Your code below:       # Hint : Use nested for loops
list=[]
for i in range(10):
  for j in range(10):
    if(i==j):
      list.append(0)
    else:
      list.append(1)
array=np.array(list)
array.shape=(10,10)
print(array)

"""# <u>**Problem 3**</u>

### Construct a list of first 100 natural numbers.Create a two dimensional array with 10 rows and whose each row contains 10 columns and each number in this array is the square of the number from your constructed list.

### For example : [[1,4,9,...,100],[121,144,...],......,]
"""

# Your code below ..
list=[]
for i in range(100):
  list.append((i+1)*(i+1))
print(list)
array=np.array(list)
array.shape=(10,10)
print(array)

"""#<u>**Problem 4**</u>

### You are given an image below. Experiment with the numpy slice operation to only get the face of the person in the image
"""

# Importing data from the skimage library. Don't worry much about it
 from skimage import data
 camera = data.camera()

# Camera is 2-D array object
camera.shape

camera

# You can plot the camera object and see the image
import matplotlib.pyplot as plt
plt.imshow(camera)

# Perform your slice operation here to get the face of the person
camera_slice = camera[60:200,155:270]
plt.imshow(camera_slice)

