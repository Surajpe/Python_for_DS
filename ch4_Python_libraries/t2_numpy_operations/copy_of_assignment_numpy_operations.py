# -*- coding: utf-8 -*-
"""Copy of Assignment - NumPy Operations.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gxpVv42Fkfn0Q7lgTYnqXLGNTcpLlDOj

# <u> Use only those concepts which have been taught till now </u>
"""

import numpy as np

"""# <u>**Problem 1**</u>

### What is the average value of the first 5 rows of the third and fourth columns?


"""

np.random.seed(21) # This guarantees the code will generate the same set of random numbers whenever executed
random_integers = np.random.randint(1,high=500000, size=(20, 5))
random_integers

# Your code here
np.average(random_integers[:5,2:4])

"""#<u>**Problem 2**</u>

### In this problem, we are going to calculate distances between some pairs of points :

### <u> Measures of distances </u>
* ### Euclidean Distance : The distance between two points $(x_{1},y_{1})$ , $(x_{2},y_{2})$ is defined as :
${\displaystyle d(x,y)={\sqrt {(x_{1}-x_{2})^{2}+(y_{1}-y_{2})^{2}}}.}$

* ### Manhattan Distance : The distance between two points $(x_{1},y_{1})$ , $(x_{2},y_{2})$ is defined as :
${\displaystyle d(x,y)=|x_{1}-x_{2}|+|y_{1}-y_{2}|}$

### Create a 2-D array of 10 points where the x-coordinates and the y-coordinates can take random integral values between 5 and 20.


### Next, create two 1-D arrays(one for  Euclidean distance and the other for  Manhattan distance) for these points
"""

# Create the 10 points
arr2d=np.array(np.random.randint(5,20,(10,10)))
print(arr2d)

from numpy.lib import math
# Calculate Euclidean distances between these pairs of points (total 10*10 = 100 pairs including self pairs). This should give you a 10*10 2-D array where each value corresponds to the distance between a pair
list=[]
for i in range(10):
  for j in range(10):
    if(j==9 and i!=9):
      a=math.sqrt(((arr2d[i][j]-0)**2)+((arr2d[i][j]-arr2d[i+1][j])**2))
    elif(i==9 and j!=9):
      a=math.sqrt(((arr2d[i][j]-arr2d[i][j+1])**2)+((arr2d[i][j]-0)**2))
    elif(i==9 and j==9):
       a=arr2d[i][j]
    else:
      a=(math.sqrt(((arr2d[i][j]-arr2d[i][j+1])**2)+((arr2d[i][j]-arr2d[i+1][j])**2)))
    list.append(a)
euclidian=np.array(list)
np.reshape(euclidian,(10,10))

print(arr2d)

# Calculate Manhattan distances between these pairs of points (total 10*10 = 100 pairs inlcuding self pairs).This should give you a 10*10 2-D array where each value corresponds to the distance between a pair.
list1=[]
for i in range(10):
  for j in range(10):
    if(j==9 and i!=9):
      a=(abs(arr2d[i][j]-0))+(abs(arr2d[i][j]-arr2d[i+1][j]))
    elif(i==9 and j!=9):
      a=(abs(arr2d[i][j]-arr2d[i][j+1]))+(abs(arr2d[i][j]-0))
    elif(i==9 and j==9):
       a=arr2d[i][j]
    else:
      a=(abs(arr2d[i][j]-arr2d[i][j+1]))+(abs(arr2d[i][j]-arr2d[i+1][j]))
    list1.append(a)
print(list)
manhattan=np.array(list1)
np.reshape(manhattan,(10,10))

"""## Find the closest pairs (excluding self pairs) on the basis of both the distance measures"""

# Your code here

"""# <u>**Problem 3**</u>

## Extract all the contiguous 3x3 blocks from a random 10x10 matrix. For example, the first matrix corresponds to [:3,:3], then the second matrix corresponds to [:3,1:4],.... Once you have covered the first three rows, then the next set of matrices would be [1:4,:3],[1:4,1:4],.... and so on and so forth. The last matrix would be [7:10,7:10]
"""

# Your code below ..
array_10=np.random.randint(1,high=5000, size=(10, 10))
print(array_10)
print("\n")
k=3
f=3
for i in range(8):
  for j in range(8):
    print(array_10[i:i+3,j:j+3])
    print("\n")

"""#<u>**Problem 4**</u>

### Write a function which finds the nearest value from a given value in an array of random N elements. Suppose you created an 1-D array with 15 elements taking values between 10 and 500. Your function would take any input from these values and return the nearest value. (You can use np.abs() function)
"""

# Your function below
nearest=501
row=int(input("Enter row size:"))
column=int(input("Enter column size:"))
array=np.random.randint(10,500, size=(row,column))
print(array)
for i in range(row):
  for j in range(column):
    compare=array[i][j]
    for i in range(row):
      for j in range(column):
        if(compare-array[i][j]!=0 and compare-array[i][j]<nearest):
          nearest=compare-array[i][j]
print(nearest+501)

