# -*- coding: utf-8 -*-
"""Assignment Solution - Tuples, Sets and Dictionaries.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1llh_u5Zh6lQOzsPjZLbKnTIrfg48kzT_

## <u>While doing this assignment only use those concepts which have been taught till now</u>

## <u>Problem 1</u>

### Another measure of average

* Mode is defined as the value that appears most often in a set of data values. Mode corresponds to the most frequent value.
* You are given a list of numbers and you need to calculate the mode of this list
"""

# A list containing average daily temperature over 10 days
temperatures = [34, 40, 29, 33, 42, 40, 39, 34, 34,33 ]

# Step 1 : Find the unique set of values. Store this in a list
unique_temperatures = list(set(temperatures))

# Print the unique temperature list
print(unique_temperatures)

# Step 2 : Create an empty dictionary which will contain the unique temperatures as keys and their counts as values
temp_dict = {}

# Set the values for each key separately
# First key
first_key = unique_temperatures[0]
temp_dict[first_key] = temperatures.count(first_key)

# Second key
second_key = unique_temperatures[1]
temp_dict[second_key] = temperatures.count(second_key)

# Third key
third_key = unique_temperatures[2]
temp_dict[third_key] = temperatures.count(third_key)

# Fourth key
fourth_key = unique_temperatures[3]
temp_dict[fourth_key] = temperatures.count(fourth_key)

# Fifth key
fifth_key = unique_temperatures[4]
temp_dict[fifth_key] = temperatures.count(fifth_key)

# Sixth key
sixth_key = unique_temperatures[5]
temp_dict[sixth_key] = temperatures.count(sixth_key)

print(temp_dict)

# Step 3: Store the dictionary values in a list
temp_dict_frequencies = list(temp_dict.values())

# Find the index of the most frequent temperature value
most_frequent_temp_index = temp_dict_frequencies.index(max(temp_dict_frequencies))

temp_dict_frequencies

# Step 4 : Create the list of dictionary keys
temp_dict_keys = list(temp_dict.keys())

# Calculate the mode temperature
mode_temp = temp_dict_keys[most_frequent_temp_index]

print(mode_temp)

"""## <u>Problem 2 </u>

### Challenging the immutability of tuples

You are given a list of tuples. You need to replace the last element of the last tuple
"""

# Input list of tuples

list_of_tuples = [(10,20,30),(30,40,50),(50,60,70)]


# Expected output : Replace the last element 70 with 100
# output_list = [(10,20,30),(30,40,50),(50,60,100)]

# Your code here
last_element = list_of_tuples[-1][:-1] + (100,)
output_list = list_of_tuples[:-1]
output_list.append(last_element)
print(output_list)

"""## <u> Problem 3 </u>

Natural Language Processing or NLP is one of the most promising fields in Machine Learning. Most of the times in NLP we deal with the textual data (a bunch of strings). Sometimes when we are processing the text, it is a common practice to get rid of some set of stop words from our original text. By default stop words are very common words used in English language such as and, or, punctuations etc.

In this exercise, you are provided with a default set of stop words and you need to add some extra set of custom words.
"""

# A sample sentence

sentence = 'Hello, good morning folks! Today we will announce the half yearly performance results of the company. Due to the ongoing COVID-19 pandemic, our profits have declined by 60% as compared to the last year'

# Print your sentence
print(sentence)

# Default set of stop words
stop_words = {"i", "me", "my", "myself", "we", "our", "ours", "ourselves", "you", "your", "yours", "yourself",
              "yourselves", "he", "him", "his", "himself", "she", "her", "hers", "herself", "it", "its", "itself",
              "they", "them", "their", "theirs", "themselves", "what", "which", "who", "whom", "this", "that",
              "these", "those", "am", "is", "are", "was", "were", "be", "been", "being", "have", "has", "had",
              "having", "do", "does", "did", "doing", "a", "an", "the", "and", "but", "if", "or", "because",
              "as", "until", "while", "of", "at", "by", "for", "with", "about", "against", "between", "into",
              "through", "during", "before", "after", "above", "below", "to", "from", "up", "down", "in", "out",
              "on", "off", "over", "under", "again", "further", "then", "once", "here", "there", "when", "where",
              "why", "how", "all", "any", "both", "each", "few", "more", "most", "other", "some", "such", "no",
              "nor", "not", "only", "own", "same", "so", "than", "too", "very", "s", "t", "can", "will", "just",
              "don", "should", "now"}

# Update the set of stop words by adding the custom stop words
custom_stop_words = ["hello","good","morning","half","yearly"]

# Your code here
stop_words.update(custom_stop_words)

# Print the stop words in a sorted manner
print(stop_words)

# # Do the same task another way. Keep in mind to use the original set of stop_words for this piece of code
custom_stop_words = ["hello","good","morning","half","yearly"]
custom_stop_words_set = set(custom_stop_words)
print(custom_stop_words_set)

stop_words = stop_words.union(custom_stop_words_set)

print(sorted(stop_words))

"""## <u>Problem 4</u>

 Write a Python script to check whether a given key already exists in a dictionary. If it does, drop that key from the dictionary. If it does not, add that key and corresponding value to the dictionary
"""

# Your dictionary
employee_dict = {'Name':'Sanket','Skills':['Python','Machine Learning','Deep Learning'],'Band':6.0,
                 'Promotion Year':[2016,2018,2020]}

# Check if the key 'Employee_ID' is present in the dictionary.
key_present = 'Employee_ID' in list(employee_dict.keys())

key_present

# If not present add this key to this dictionary and the corresponding value to be 4503233
employee_dict['Employee_ID'] = 45032433

print(employee_dict)

# Check if the key 'Band' is present in the dictionary.
key_present = 'Band' in list(employee_dict.keys())

key_present

# If present, drop this key from the dictionary
employee_dict.pop('Band')

employee_dict

