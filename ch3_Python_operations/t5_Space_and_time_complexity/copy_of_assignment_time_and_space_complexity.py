# -*- coding: utf-8 -*-
"""Copy of Assignment - Time and Space Complexity.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1I6v_AdilOfJk8KFrHIOyNKuFZjCLUWlg

## <u>While doing this assignment only use those concepts which have been taught till now</u>

# Problem 1

Write a Python function which takes a string as an input and returns the reversed string as an output.


*   Do not use any inbuilt funtion or method. Use `for` loops only.
*   Also, do the time and space complexity analysis.
"""

# Write your code here
def reverse(sen):
  reversen=''
  for i in range(len(sen)):
    reversen=reversen+(sen[len(sen)-1-i])
  return reversen

reverse('suraj')

# Time Complexity : 0(n)
# Space Complexity :0(n)
# Auxiliary Space : 0(1)

"""# Problem 2

Write a Python function which takes a list of `n` lists as an input. Each of the `n` lists have `m` non-zero positive integers each. The function should return a list which contains `n` integers corresponding to the square of the maximum of each of the `n` lists in the list of lists.

Example:
Inputs
```
n = 2
m = 3
list_of_lists = [[1, 2, 3], [5, 7, 6]]
```
Output:
```
[9, 49]
```

*   Do not use any inbuilt funtion or method. Use `for` loops only.
*   Also, do the time and space complexity analysis.

"""

# Write your code here
outer_list=[]
squared_list=[]
def list_of_lists(n,m):

  for j in range(n):
    inner_list=[]
    for i in range(m):
      v=int(input())
      inner_list.append(v)
    outer_list.append(inner_list)
  max_element(outer_list)
  return outer_list


def max_element(lis):
  print("inside max_list")

  for ele in lis:
    max=0
    for inner_ele in ele:
      if(inner_ele>max):
        max=inner_ele
    squared_list.append(max*max)
  return squared_list

n=int(input())
m=int(input())
list_of_lists(n,m)
print(outer_list)
print(squared_list)

# Time Complexity : 0(n^2)
# Space Complexity : 0(n)
# Auxiliary Space : 0(1)

